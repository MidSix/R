reticulate::repl_python()
q()
plot.function(x,y = 2)
plot.function(200,500)
a = 32
view(a)
View(a)
a = int(32)
a = 32
View(a)
dv
View(r)
View(a)
demo()
help(demo)
?View
help.search("normal")
help.search("median")
median(a)
median(a,na.rm = FALSE)
median(a,44.rm = FALSE)
median(a)
median(a)
?median
?median
median(a, na.rm = FALSE)
median(a, na.rm = FALSE)
sqrt(25)
a = sqrt(25) + 3
print(a)
print(a)
a = sqrt(25) + 3
print(a)
a = sqrt(25) + 3
print(a)
pi
a = sqrt(25) + 3
print(a)
pi
?q
a
print(a)
?print
a <- sqrt(25) + 3
print(a)
a
a <- sqrt(25) + 3
a
precip
data(precip)
a = data(precip)
a
summary(precip)
hist(precip)
R = 1500*(0,05/1-(1+0,05)**-10)
n = 10
R = 1500*(0.05/1-(1+0.05)**-10)
R
methods(plot)
plot.default()
plot.default(x)
plot.default(P)
plot.default(i)
a <- 49 * (4/49)
a
a
a
a <- 1:20
a
P <- 1500
i = 0.05
n = 10
R = 1500*(0.05/1-(1+0.05)**-10)
a <- 1:20
a
View(R)
a <- 49 * (4/49)
a
print(a, digits = 3)
a == 4
# identical(a, 4)
sprintf(" %.20f",a)
all.equal(a, 4)
?sprintf
2+2 ; 1+4*2
#Consultar la ayuda de una función: ?function
?mean
# identical(a, 4)
sprintf(" %.20f",a)
all.equal(a, 4)
a == 4
a <- 49 * (4/49)
#Vector numérico
a = c(5,7,3,4,6,99)
a
a = c(5,7,3,4,6,99)
a
mean(a)    #Sensible a datos atípicos
median(a)  #Robusta  a datos atípicos
?c
#Datos faltantes o no observados
a <- c(5,7,3,4,6,NA)
a
mean(a)
mean(a, na.rm=TRUE)
#Datos faltantes o no observados
a <- c(5,7,3,4,6,NA,NA,NA) #Si algún dato falta es preciso colocar NA. "Not available"
mean(a, na.rm=TRUE)  #Con ese argumento es posible eliminar todos los datos faltantes
?ceiling
Inf
#Vector lógico
l = c(T,F,T,T,T,F)
l
mean(l)
?min
m <- c(m1,m2,"M","H","Hombre","V","H")
#Cadena de caracteres
m1 <- "Mujer"
m2 <- "mujer"
m <- c(m1,m2,"M","H","Hombre","V","H")
m  <- as.factor(m)
m
#Cadena de caracteres
m1 <- "Mujer"
m2 <- "mujer"
m  <- c(m1,m2,"Mujer","Hombre","Hombre","Mujer","Hombre")
m  <- as.factor(m)
class(m)
class(a)
class(l)
n <- length(m) #Longitud del vector, tamaño muestral
#Frecuencia absoluta, recuento
table(m)
#Frecuencia relativa proporciones
table(m)/n
plot(m)
m2 <- "dinosaurio"
m  <- c(m1,m2,"Mujer","Hombre","Hombre","Mujer","Hombre","Hombre")
m  <- as.factor(m)
class(m)
m1 <- "Mujer"
m2 <- "dinosaurio"
m  <- c(m1,m2,"Mujer","Hombre","Hombre","Mujer","Hombre","Hombre")
m  <- as.factor(m)
class(m)
class(a)
class(l)
n <- length(m) #Longitud del vector, tamaño muestral
#Frecuencia absoluta, recuento
table(m)
#Frecuencia relativa proporciones
table(m)/n
plot(m)
#Frecuencia relativa proporciones
table(m)/n
#Frecuencia relativa proporciones
(table(m)/n)*100
#Matriz
matrix(1:10,2,5,byrrow=T)
#Matriz
matrix(1:10,2,5,byrow = T)
#Matriz
matrix(1:10,2,5,byrow = F)
#Matriz
k <- matrix(1:10,2,5,byrow = T)
t(k)
#Matriz
k <- matrix(1:10,2,5,byrow = f)
#Matriz
k <- matrix(1:10,2,5,byrow = F)
#Matriz
k <- matrix(1:10,2,5,byrow = F)
k
#Matriz
k <- matrix(1:10,2,5,byrow = T)
k
L3 <- LETTERS(c(1,5,10))
L3 <- [LETTERSc(1,5,10)]
L3 <- LETTERS(c(1,5,10))
L3 <- LETTERS[c(1,5,10)]
L3 <- LETTERS[c(1,5,10)]
LETTERS[-c(1,5,10)]
L3 <- LETTERS[c(1,5,10)]
L3
L3
LETTERS[-c(1,5,10)]
L3 <- LETTERS[c(1,5,10)]
L3
LETTERS[-c(1,5,10)]
y <- rep(1:2,len(10))
L3 <- LETTERS[c(1,5,10)]
L3
LETTERS[-c(1,5,10)]
y <- rep(1:2,len=10)
y
df <- data.frame(id=1:10, y= y, char = LETTERS[(1:10)])
df
sample(moneda,10,replace=T,prob=c(0.5,.5))
monedas=c("cara","cruz")
sample(moneda,10,replace=T,prob=c(0.5,.5))
monedas=c("cara","cruz")
sample(moneda,10,replace=T,prob=c(0.5,.5))
monedas=c("cara","cruz")
sample(monedas,10,replace=T,prob=c(0.5,.5))
table(sample(monedas,10,replace=T,prob=c(0.5,.5)))
table(sample(monedas,10,replace=T,prob=c(0.5,.5)))
table(sample(monedas,10,replace=T,prob=c(0.5,.5)))
function (x, size, replace = FALSE, prob = NULL)
table(sample(monedas,10,replace=T,prob=c(0.5,.5)))
table(sample(monedas,10,replace=T,prob=c(0.5,.5)))
table(sample(monedas,10,replace=T,prob=c(0.5,.5)))
table(sample(monedas,10,replace=T,prob=c(0.5,.5)))
table(sample(monedas,10,replace=T,prob=c(.5,.5)))
table(sample(monedas,1000,replace=T,prob=c(.5,.5)))
table(sample(monedas,10000,replace=T,prob=c(.5,.5)))
table(sample(monedas,100000,replace=T,prob=c(.5,.5)))
table(sample(monedas,10,replace=T,prob=c(.5,.5)))
monedas=c("cara","cruz")
table(sample(monedas,10,replace=T,prob=c(.5,.5)))
table(precip.cat)
class(precip)
table(precip.cat)
data(precip)
class(precip)
str(precip)
head(precip)
tail(precip)
#Categorizar una variable numérica
summary(precip)
precip.cat <- ifelse(precip < median(precip))
data(precip)
class(precip)
str(precip)
head(precip)
tail(precip)
#Categorizar una variable numérica
summary(precip)
precip.cat <- ifelse(precip < median(precip), "bajo", "alto")
precip.cat <- factor(precip.cat)
summary(precip)
table(precip.cat)
plot(precip.cat)
#Categorizar una variable numérica
summary(precip)
#Categorizar una variable numérica
summary(precip)
summary(precip.cat)
summary(precip)
summary(precip.cat)
precip[c(1,4,10)]
precip_bajo <- precip[precip < mean(precip)]
summary(precip_bajo)
#Estados con precipitación alta
precip[c(1,4,10)]
#Estados con precipitación alta
precip[c(1,4,10)]
#Estados con precipitación alta
precip(c(1,4,10))
#Estados con precipitación alta
precip[c(1,4,10)]
?cat
cat("Hello")
hist(precip_bajo)
quantile(precip_bajo)
quantile(precip_bajo, probs=0.9)
#percentil 90: dato que deja al 90% de los datos atrás
p90 <- quantile(precip_bajo, probs=0.9)
cat(p90)
precip_bajo[precip_bajo <p90]
precip_bajo[precip_bajo < p10]
p10 <- quantile(precip_bajo, probs=0.1)
precip_bajo[precip_bajo < p10]
#Crear una variable con k categorías
precip_k <- cut(precip)
summary(precip.k)
summary(precip_k)
#Crear una variable con k categorías
precip_k <- cut(precip,4)
summary(precip_k)
#op1, cuartiles de rango x
precip_k <- cut(precip,4)
summary(precip_k)
cuartiles <- quantile(precip)
cuartiles
#op2, cuartiles de rango x
precip_q <- cut(precip,cuartiles)
summary(precip_q)
cuartiles
cuartiles[1] = -inf
cuartiles[1] = -Inf
#op2, cuartiles de rango x
precip_q <- cut(precip,cuartiles)
summary(precip_q)
?cut
#Crear una variable con k categorías
#op1, cuartiles de rango x
precip_k <- cut(precip,4)
#Crear una variable con k categorías
#op1, cuartiles de rango x
precip_k <- cut(precip,4)
summary(precip_k)
cuartiles <- quantile(precip)
#op2, cuartiles de rango x
precip_q <- cut(precip,cuartiles)
summary(precip_q)
summary(precip_q)
cuartiles[1] = -Inf
summary(precip_q)
#op2, cuartiles de rango x
precip_q <- cut(precip,cuartiles)
#Crear una variable con k categorías
#op1, cuartiles de rango x
precip_k <- cut(precip,4)
summary(precip_k)
cuartiles <- quantile(precip)
cuartiles[1] = -Inf
#op2, cuartiles de rango x
precip_q <- cut(precip,cuartiles)
summary(precip_q)
?cut
install.packages("palmerpenguins")
rm(list=ls())
library(palmerpenguins)
data(package = 'palmerpenguins')
head(penguins)
datos = as.data.frame(penguins)
class(datos)
str(datos)
?class
str(datos)
head(datos)
head(datos)
tail(datos)
summary(datos)
?datos
datos[,c(1,2,7)]
datos[1:4]
datos[seq(1,344,by=50),]
datos[c(1,2,7)]
datos[,c(1,2,7)]
datos[1:4]
datos[seq(1,344,by=50),]
#Seleccionar hembra
datosf = datos[datos[,"sex"]] == "female"
#Seleccionar hembra
datosf = datos[,"sex"] == "female"
ind = datosf = datos[,"sex"] == "female"
which(datos[,"sex"] == "female")
head(datos)
datosf(datos[ind,])
datosf <- (datos[ind,])
summary(datosf)
summary(datosf)
datos.na = na.omit(datos)
dim(datos)
dim(datos.na)
attributes(datos)
attributes(datos.na)$na.action
summary(datos.na)
mean(datos$bill_length_mm, na.rm=TRUE)
mean(datos.na$bill_length_mm)
?dim
?$
load("movil.RData")
load("movil.RData")
c(1:10)
1:10
class(1:10)
class(c(1:10))
class("H", "o", "l", "a")
class(c("H", "o", "l", "a"))
?dnorm
Notas <- c(5, 6, 7, 8, 9)
K <- mean(Notas)
Notas <- Notas - K
Notas <- Notas ^ 2
Varianza <- mean(Notas)
ds <- sqrt(Varianza)
ds
Notas2 <- c(5, 6, 7, 8, 9)
sd_notas2 <- sd(Notas2)
sd_notas2
search()
library("ggvis")
search()
View(datosf)
View(datos)
View(datos)
#Práctica 1:
data(precip)
?precip
#Práctica 1:
data(precip)
summary(precio)
summary(precip)
precip
cat(length(precip))
?data
?as.numeric
as.numeric(4)
is.numeric(4)
as.numeric((is.numeric(3))
summary(precip)
as.numeric((is.numeric(3))
as.numeric((is.numeric(-3))
as.numeric((is.numeric(-3))
cat(length(precip))
as.numeric((is.numeric(-3))
sd
as.numeric(c("-.1"," 2.7 ","B"))
k <- as.numeric(c("-1", "2.7", "B"))
k
ls()
ls()
rm(list = ls())
ls()
ls()
character(0)
character(2)
k <- character(3)
k
k
k
k <- c(1,2,3)
k
getwd()
getwd
getwd()
cat("Hello world")
setwd("C:\Users\Sebastián Expósito\OneDrive\Desktop\Examen R")
setwd("C:/Users/Sebastián Expósito/OneDrive/Desktop/Examen R")
getwd()
ls()
